1. NodeJS basics
a)
In a browser, global scope is the window object. In Node.js, global object represents the global scope.
To add something in global scope, you need to export it using export or module.export. 
The same way, import modules/object using require() function to access it from the global scope.

For example, to export an object in Node.js, use exports.name = object.

b)
Node.js includes three types of modules:

Core Modules
Local Modules
Third Party Modules

In order to use Node.js core or NPM modules, you first need to import it using require() 
function as shown below.

var module = require('module_name');

The require() function will return an object, function, property or any other JavaScript type, 
depending on what the specified module returns.
You can then use its properties and methods using dot notation e.g. http.createServer().

The following example demonstrates how to use Node.js http module to create a web server.
Example: Load and Use Core http Module

var http = require('http');

var server = http.createServer(function(req, res){

  //write code here

});

server.listen(5000); 

In the above example, 
require() function returns an object because http module returns its functionality as an object, 
you can then use its properties and methods using dot notation e.g. http.createServer().

In this way, you can load and use Node.js core modules in your application.

c)
Local modules are modules created locally in your Node.js application. 
These modules include different functionalities of your application in separate files and folders. 

So, create a Log.js file and write the following code in it.

var log = {
            info: function (info) { 
                console.log('Info: ' + info);
            },
            warning:function (warning) { 
                console.log('Warning: ' + warning);
            },
            error:function (error) { 
                console.log('Error: ' + error);
            }
    };

module.exports = log

In the above example of logging module, we have created an object with three functions - info(), warning() and error(). 
At the end, we have assigned this object to module.exports. 
The module.exports exports the log object we created as a module.

The module.exports is a special object which is included in every JS file in the Node.js application by default. 
Use module.exports or exports to export a function, object or variable as a module in Node.js.

Now, let's see how to use the above logging module in our application.

To use local modules in your application, you need to load it using require() function in the same way as core module. 
However, you need to specify the path of JavaScript file of the module.

In app.js: 

var myLogModule = require('./Log.js');
myLogModule.info('Node.js started');

In the above example, app.js is using log module. 
First, it loads the logging module using require() function and specified path where logging module is stored. 
Logging module is contained in Log.js file in the root folder. S
o, we have specified the path './Log.js' in the require() function. 
The '.' denotes a root folder.

The require() function returns a log object because logging module exposes an object in Log.js using module.exports. 
So now you can use logging module as an object and call any of its function using dot notation 
e.g myLogModule.info() or myLogModule.warning() or myLogModule.error()

d)
Thus we can expose an object with function. 
The following attaches the log function (as a module) to the exports object.

In Log.js: 

module.exports.log = function (msg) { 
    console.log(msg);
};

The above module will expose an object i.e. { log : function(msg){ console.log(msg); } } to the global scope/object
Use the above module as shown below.

app.js
var msg = require('./Log.js');

msg.log('Hello World');